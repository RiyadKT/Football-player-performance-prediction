{
 "cell_type": "code",
 "execution_count": null,
 "metadata": {},
 "outputs": [],
 "source": [
  "# Geopanda proto carte transferts :",
  "# Voici un exemple de code (en Python) pour :",
  "#  1. Charger le fichier CSV consolidé (données FBref + TM),",
  "#  2. Associer à chaque club une localisation (latitude/longitude) et calculer",
  "#     la somme de la valeur marchande de ses joueurs pour dimensionner un point,",
  "#  3. Afficher une carte interactive avec Folium (points = clubs, taille = somme des valeurs marchandes),",
  "#  4. Gérer un sélecteur de saison (scrollable) pour afficher la carte de la saison sélectionnée,",
  "#  5. Cliquer sur un club → afficher (dans un popup ou un calque) :",
  "#     - Les transferts entrants et sortants (arcs/flèches) classés par valeur marchande,",
  "#     - Les joueurs en provenance/envoi hors PL (clubs non PL) listés.",
  "#",
  "# Note :",
  "# - Folium + GeoPandas est un combo courant :",
  "#   * GeoPandas pour manipuler et projeter les données spatiales,",
  "#   * Folium pour générer une carte interactive (HTML/Leaflet).",
  "# - Ce code est un prototype :",
  "#   * Il suppose la présence de colonnes (club_name, season, player_name, market_value, latitude, longitude, etc.)",
  "#     + colonnes pour transferts (origin_club, destination_club, fee…).",
  "#   * Adaptez selon vos colonnes réelles.",
  "# - Pour gérer les “flèches”, on contourne en créant un FeatureGroup par club,",
  "#   que l’on coche/décoche dans un LayerControl.",
  "# - Un “sélecteur de saison” peut être fait en générant plusieurs FeatureGroups ou cartes.",
  "# -----------------------------------------------------------------------------",
  "# 1) Imports & installation (si besoin : pip install geopandas folium)",
  "# -----------------------------------------------------------------------------",
  "import pandas as pd",
  "import geopandas as gpd",
  "import folium",
  "from folium import FeatureGroup",
  "import math",
  "",
  "# -----------------------------------------------------------------------------",
  "# 2) Lecture du CSV consolidé (ex. \"player_stats_fbref.csv\")",
  "# -----------------------------------------------------------------------------",
  "df = pd.read_csv(\"player_stats_fbref.csv\")",
  "# Filtrage éventuel de la Premier League (ex. code 'GB1')",
  "df_pl = df[df[\"championship\"] == \"GB1\"]",
  "",
  "# -----------------------------------------------------------------------------",
  "# 3) Focus sur une saison + creation d'un GeoDataFrame clubs",
  "# -----------------------------------------------------------------------------",
  "current_season = \"2023-2024\"  # saison d'exemple",
  "df_current = df_pl[df_pl[\"season\"] == current_season]",
  "",
  "# Calcul de la valeur marchande totale par club",
  "club_agg = df_current.groupby([\"club_name\", \"latitude\", \"longitude\"], dropna=False)[\"market_value\"].sum().reset_index()",
  "club_agg.rename(columns={\"market_value\": \"total_mv\"}, inplace=True)",
  "",
  "# Conversion en GeoDataFrame",
  "gdf_clubs = gpd.GeoDataFrame(",
  "    club_agg,",
  "    geometry=gpd.points_from_xy(club_agg[\"longitude\"], club_agg[\"latitude\"]),",
  "    crs=\"EPSG:4326\"",
  ")",
  "",
  "# -----------------------------------------------------------------------------",
  "# 4) Création de la carte Folium",
  "# -----------------------------------------------------------------------------",
  "m = folium.Map(location=[53.0, -2.0], zoom_start=6, tiles=\"cartodbpositron\")",
  "",
  "# -----------------------------------------------------------------------------",
  "# 5) Ajouter les clubs (cercles dimensionnés par total_mv)",
  "# -----------------------------------------------------------------------------",
  "for _, row in gdf_clubs.iterrows():",
  "    club_name = row[\"club_name\"]",
  "    total_mv = row[\"total_mv\"]",
  "    lat, lon = row.geometry.y, row.geometry.x",
  "    radius = math.sqrt(total_mv) * 0.3  # coefficient de mise à l’échelle",
  "",
  "    popup_html = f\"\"\"",
  "    <b>{club_name}</b><br>",
  "    Valeur marchande totale : {int(total_mv)} M€<br>",
  "    (Saison {current_season})<br>",
  "    <i>Cochez la couche <u>Transferts de {club_name}</u> pour voir les flèches</i>",
  "    \"\"\"",
  "",
  "    folium.CircleMarker(",
  "        location=[lat, lon],",
  "        radius=radius,",
  "        fill=True,",
  "        fill_opacity=0.7,",
  "        color=\"red\",",
  "        popup=popup_html",
  "    ).add_to(m)",
  "",
  "# -----------------------------------------------------------------------------",
  "# 6) Gestion des transferts (FeatureGroup par club)",
  "# -----------------------------------------------------------------------------",
  "# a) Table de transferts",
  "df_trans = df_current.dropna(subset=[\"origin_club\", \"destination_club\", \"player_name\", \"fee\"])",
  "",
  "# b) Dictionnaire club -> (lat, lon)",
  "club_positions = {}",
  "for _, row in gdf_clubs.iterrows():",
  "    club_positions[row[\"club_name\"]] = (row.geometry.y, row.geometry.x)",
  "",
  "def get_coords(club):",
  "    \"\"\"Retourne (lat, lon) ou (None, None) si club inconnu\"\"\"",
  "    return club_positions.get(club, (None, None))",
  "",
  "# c) FeatureGroup par club",
  "fg_by_club = {}",
  "for _, row in gdf_clubs.iterrows():",
  "    c_name = row[\"club_name\"]",
  "    fg = FeatureGroup(name=f\"Transferts de {c_name}\", show=False)",
  "    fg_by_club[c_name] = fg",
  "    m.add_child(fg)",
  "",
  "# d) Tracer les polylignes (transferts)",
  "for _, line in df_trans.iterrows():",
  "    origin = line[\"origin_club\"]",
  "    dest = line[\"destination_club\"]",
  "    fee = line[\"fee\"]",
  "    player = line[\"player_name\"]",
  "",
  "    lat_o, lon_o = get_coords(origin)",
  "    lat_d, lon_d = get_coords(dest)",
  "",
  "    # Si hors PL => lat/lon à None => on ignore ou on gère différemment",
  "    if lat_o is None or lat_d is None:",
  "        continue",
  "",
  "    # Transfert sortant",
  "    pol_out = folium.PolyLine(",
  "        locations=[(lat_o, lon_o), (lat_d, lon_d)],",
  "        tooltip=f\"{player} : {fee} M€\\n{origin} -> {dest}\",",
  "        color=\"blue\",",
  "        weight=2",
  "    )",
  "    if origin in fg_by_club:",
  "        fg_by_club[origin].add_child(pol_out)",
  "",
  "    # Transfert entrant",
  "    pol_in = folium.PolyLine(",
  "        locations=[(lat_o, lon_o), (lat_d, lon_d)],",
  "        tooltip=f\"{player} : {fee} M€\\n(Reçu par {dest} de {origin})\",",
  "        color=\"green\",",
  "        weight=2",
  "    )",
  "    if dest in fg_by_club:",
  "        fg_by_club[dest].add_child(pol_in)",
  "",
  "# -----------------------------------------------------------------------------",
  "# 7) Sélecteur multi-saisons ?",
  "# -----------------------------------------------------------------------------",
  "# Ici on n’a géré qu’une seule saison. Pour plusieurs, on peut créer",
  "# d’autres FeatureGroups ou refaire la même logique dans une boucle.",
  "",
  "# -----------------------------------------------------------------------------",
  "# 8) LayerControl + sauvegarde",
  "# -----------------------------------------------------------------------------",
  "folium.LayerControl().add_to(m)",
  "m.save(\"map_transfers_PL.html\")",
  "print(\"Carte interactive enregistrée dans 'map_transfers_PL.html'\")"
 ]
}
